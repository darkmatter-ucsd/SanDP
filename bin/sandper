#!/usr/bin/env python

import argparse
import os
import sys
import sandp
from sandp import waveform
from sandp import rawdata
from sandp import peakproperty
from sandp import calvariables
from pymongo import MongoClient

def main():
    parser = argparse.ArgumentParser()

    client = MongoClient('mongodb://sandix:%s@132.239.186.12:27017' % os.environ['MONGO_PASSWORD'])
    db = client['run']
    coll = db['data']
    
    ## -------------->
    parser.add_argument(
    '--process',
    dest='processing',
    action='store_true',
    help='start processing rawdata')
    ## -------------->
    
    ## version:
    parser.add_argument('--version', action = 'store_true', help = "latest version")
    
    ## wavefom:
    parser.add_argument(
    '--waveform',
    dest='generate_wf',
    action='store_true',
    help='generate waveform from raw data')
    
    ## input file
    parser.add_argument(
    '--input',
    action='store',
    dest='raw_data',
    help='name of the raw data',
    type=str)

    ## path of the processed file
    parser.add_argument(
    '--outpath',
    action='store',
    dest='outdata_path',
    help='the location that save the processed file',
    type=str)
    
    ## event ID
    parser.add_argument(
        '--event', 
        action = 'store', 
        dest = 'eventid',
        help = "which event you want to see?",
        type = int)

    parser.add_argument('--savepath', help="where do you want to save the waveform?", type=str, default=False)

    ### =====================>
    ### =====================>
    args = parser.parse_args()

    if args.version:
        print (sandp.__version__)
        exit()
        
    ###################
    ## show waveform
    ###################
    
    if (args.generate_wf):
        waveform.drawWF(args.eventid, args.raw_data, args.savepath)

    ###################
    ## start processing
    ###################
    
    if (args.processing):
        # get data name from raw_data
        data_name = ''.join(args.raw_data.split('/')[-1].split('.')[0].split('_')[-1].split('T'))
        # find sample length from mongodb using data name
        cursor = coll.find({'run_name': data_name})[0]
        config = {}
        config['window_length'] = cursor['window_length']
        # config['trigger_position'] = cursor['trigger_position']

        calvariables.process(args.raw_data, args.outdata_path, config)

if __name__ == '__main__':
    main()